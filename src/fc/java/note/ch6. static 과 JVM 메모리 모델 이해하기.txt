ch6. static 과 JVM 메모리 모델 이해하기


1.static과 메모리의 관계
public class StaticTest{
    public static void main(string[] args){
    System.out.println(“Hello Java”);
    }
}

 ① JVM이 실행할 class를 찾는다.
 ② static keyword가 붙어있는 멤버들을 정해진 메모리(static-zone) 위치에 자동으로 로딩한다. (호출하지 않아도 자동 로딩)
    - static 멤버들을 클래스를 사용하는 시점에서 딱 한번 메모리에 로딩된다.
    - main() 메서드가 static이기 때문에 메모리에 자동으로 로딩한다.
 ③ JVM이 static-zone에서 main() 메서드를 호출한다.
 ④ 호출된 메서드를 Call Stack Frame Area(Stack Area)에 push(기계어코드를 넣고) 한 뒤 동작을 시작한다.

2.static 멤버 들의 접근 방법

3.private생성자와 static과의 관계


4.JVM이 사용하는 메모리 영역
 ① Method Area
 static-zone과 non static-zone으로 나뉜다.
 static 멤버들은 static-zone에 할당된다.

 ② Heap Area
 객체가 생성되는 메모리 공간(new 연산자)
 GC에 의해서 메모리가 수집된다.

 ③ Thread
 메서드가 호출 되면
 메서드의 기계어코드를 할당 받고(Native MethodArea)
 메서드가 실행 되는 메모리공간 (Call Stack Frame Area)
 ( 지역변수, 매개변수들이 만들어지는 공간)

  PC(Program Counter)에 의해서 현재 실행 중인 프로그램의 위치가 관리된다.
  LIFO구조로 운영이 되는 메모리공간 (메서드의 호출 순서를 알 수 있다)

 ④Runtime Constant Pool  (Literal Pool)
  상수 값 할당이 되는 메모리 공간
  문자열 중 문자열 상수(Literal : 리터럴)가 할당 되는 메모리 공간

5.class, object, instance의 상호관계
class  = 객체를 모델링 하는 도구 (설계도)
Object = 클래스를 통해서 선언되는 변수
Instance (인스턴스, 실체) - 객체 생성에 의해 메모리(Heap memory)에 만들어진 객체
